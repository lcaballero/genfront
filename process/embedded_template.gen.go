// Code generated by go-bindata.
// sources:
// embedded_files/di_logger.gf
// embedded_files/dump_struct.gf
// embedded_files/plain.gf
// DO NOT EDIT!

package process

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _di_loggerGf = []byte(`package {{ .GOPACKAGE }}

import (
	seelog "github.com/cihub/seelog"
)

var log seelog.LoggerInterface = seelog.Disabled

func DisableLog() {
	log = seelog.Disabled
}

func UseLogger(logger seelog.LoggerInterface) {
	log = logger
}

func FlushLog() {
	log.Flush()
}

`)

func di_loggerGfBytes() ([]byte, error) {
	return _di_loggerGf, nil
}

func di_loggerGf() (*asset, error) {
	bytes, err := di_loggerGfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "di_logger.gf", size: 267, mode: os.FileMode(420), modTime: time.Unix(1507911846, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dump_structGf = []byte(`{{ range $key, $val := . }}{{ $key }} {{ $val }}
{{ end }}-------------------------------------------------------------------------------
Names:
{{ range $index, $name := .names }}{{ $index }} {{ $name }}
{{ end }}`)

func dump_structGfBytes() ([]byte, error) {
	return _dump_structGf, nil
}

func dump_structGf() (*asset, error) {
	bytes, err := dump_structGfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dump_struct.gf", size: 214, mode: os.FileMode(420), modTime: time.Unix(1507875574, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _plainGf = []byte(`package {{ .GOPACKAGE }}
`)

func plainGfBytes() ([]byte, error) {
	return _plainGf, nil
}

func plainGf() (*asset, error) {
	bytes, err := plainGfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plain.gf", size: 25, mode: os.FileMode(420), modTime: time.Unix(1507875574, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"di_logger.gf":   di_loggerGf,
	"dump_struct.gf": dump_structGf,
	"plain.gf":       plainGf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"di_logger.gf":   &bintree{di_loggerGf, map[string]*bintree{}},
	"dump_struct.gf": &bintree{dump_structGf, map[string]*bintree{}},
	"plain.gf":       &bintree{plainGf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
